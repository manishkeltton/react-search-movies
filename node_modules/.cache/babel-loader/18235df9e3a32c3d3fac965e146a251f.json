{"ast":null,"code":"var _jsxFileName = \"/var/www/html/react-movie-database/src/components/MainComponentTwo.js\";\n// server.autosuggest.js\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './autosuggest.css';\nimport MainComponent from './MainComponent';\nimport Results from './Results';\n\nclass MainComponentTwo extends React.Component {\n  constructor() {\n    super(); //Define state for value and suggestion collection\n\n    this.getSuggestions = async value => {\n      const inputValue = value.trim().toLowerCase();\n      let response = await fetch(\"http://www.omdbapi.com/?s=\" + inputValue + \"&apikey=a591bb53\");\n      let data = await response.json();\n      this.setState({\n        results: data\n      });\n      return data;\n    };\n\n    this.getSuggestionValue = suggestion => suggestion.Title;\n\n    this.renderSuggestion = suggestion => React.createElement(\"span\", {\n      className: \"sugg-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"icon-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: suggestion.Poster,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })), React.createElement(\"span\", {\n      className: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, suggestion.Title));\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.getSuggestions(value).then(data => {\n        if (data.Error) {\n          this.setState({\n            suggestions: []\n          });\n        } else {\n          this.setState({\n            suggestions: data.Search\n          });\n        }\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.openPopup = () => {};\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      results: []\n    };\n  } // Filter logic\n\n\n  render() {\n    const _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions,\n          results = _this$state.results;\n    console.log(\"Suggestion\", results); // Option props\n\n    const inputProps = {\n      placeholder: 'Type movie name',\n      value,\n      onChange: this.onChange\n    }; // Adding AutoSuggest component\n\n    return React.createElement(React.Fragment, null, React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(Results, {\n      results: thisresults,\n      openPopup: this.openPopup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MainComponentTwo;","map":{"version":3,"sources":["/var/www/html/react-movie-database/src/components/MainComponentTwo.js"],"names":["React","Autosuggest","MainComponent","Results","MainComponentTwo","Component","constructor","getSuggestions","value","inputValue","trim","toLowerCase","response","fetch","data","json","setState","results","getSuggestionValue","suggestion","Title","renderSuggestion","Poster","onChange","event","newValue","onSuggestionsFetchRequested","then","Error","suggestions","Search","onSuggestionsClearRequested","openPopup","state","render","console","log","inputProps","placeholder","thisresults"],"mappings":"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","sourcesContent":["// server.autosuggest.js\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport './autosuggest.css';\nimport MainComponent from './MainComponent';\nimport Results from './Results';\n\nclass MainComponentTwo extends React.Component {\n    constructor() {\n        super();\n\n        //Define state for value and suggestion collection\n        this.state = {\n            value: '',\n            suggestions: [],\n            results: [],\n        };\n    }\n\n    // Filter logic\n    getSuggestions = async (value) => {\n        const inputValue = value.trim().toLowerCase();\n        let response = await fetch(\"http://www.omdbapi.com/?s=\" + inputValue + \"&apikey=a591bb53\");\n        let data = await response.json()\n        this.setState({ results: data})\n        return data;\n    };\n\n    // Trigger suggestions\n    getSuggestionValue = suggestion => suggestion.Title;\n\n    // Render Each Option\n    renderSuggestion = suggestion => (\n        <span className=\"sugg-option\">\n            <span className=\"icon-wrap\"><img src={suggestion.Poster} /></span>\n            <span className=\"name\">\n                {suggestion.Title}\n            </span>\n        </span>\n    );\n\n    // OnChange event handler\n    onChange = (event, { newValue }) => {\n        this.setState({\n            value: newValue\n        });\n    };\n\n    // Suggestion rerender when user types\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.getSuggestions(value)\n            .then(data => {\n                if (data.Error) {\n                    this.setState({\n                        suggestions: []\n                    });\n                } else {\n                    this.setState({\n                        suggestions: data.Search\n                    });\n                }\n            })\n    };\n\n\n    // Triggered on clear\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    openPopup = () => {}\n\n    render() {\n        const { value, suggestions, results } = this.state;\n        console.log(\"Suggestion\", results)\n        \n        // Option props\n        const inputProps = {\n            placeholder: 'Type movie name',\n            value,\n            onChange: this.onChange\n        };\n\n        // Adding AutoSuggest component\n        return (\n            <>\n            <Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                getSuggestionValue={this.getSuggestionValue}\n                renderSuggestion={this.renderSuggestion}\n                inputProps={inputProps}\n            />\n            {/* <MainComponent value={value} /> */}\n            <Results results={thisresults} openPopup={this.openPopup} />\n\n            </>\n        );\n    }\n}\n\nexport default MainComponentTwo;"]},"metadata":{},"sourceType":"module"}