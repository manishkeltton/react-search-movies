{"ast":null,"code":"import _slicedToArray from \"/var/www/html/react-movie-database/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/var/www/html/react-movie-database/src/components/Search.js\";\nimport React, { useState } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport search from './MainComponent';\n\nfunction Search({\n  handleInput,\n  search\n}) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        value = _useState2[0],\n        setValue = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        suggestions = _useState4[0],\n        setSuggestions = _useState4[1];\n\n  const onSuggestionsFetchRequested = ({\n    value\n  }) => {\n    search(value).then(data => {\n      if (data.Error) {\n        setSuggestions({\n          suggestions: []\n        });\n      } else {\n        setSuggestions({\n          suggestions: data.Search\n        });\n      }\n    });\n    console.log();\n  };\n\n  const onSuggestionsClearRequested = () => {\n    setSuggestions({\n      suggestions: []\n    });\n  };\n\n  const getSuggestionValue = suggestion => suggestion.Title;\n\n  const renderSuggestion = suggestion => React.createElement(\"span\", {\n    className: \"sugg-option\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, suggestion.Title));\n\n  return React.createElement(\"section\", {\n    className: \"searchbox-wrap\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: handleInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n}\n\nexport default Search;","map":{"version":3,"sources":["/var/www/html/react-movie-database/src/components/Search.js"],"names":["React","useState","Autosuggest","search","Search","handleInput","value","setValue","suggestions","setSuggestions","onSuggestionsFetchRequested","then","data","Error","console","log","onSuggestionsClearRequested","getSuggestionValue","suggestion","Title","renderSuggestion"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAGA,SAASC,MAAT,CAAiB;AAAEC,EAAAA,WAAF;AAAeF,EAAAA;AAAf,CAAjB,EAA0C;AAAA,oBACfF,QAAQ,CAAC,EAAD,CADO;AAAA;AAAA,QAClCK,KADkC;AAAA,QAC3BC,QAD2B;;AAAA,qBAEHN,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,QAElCO,WAFkC;AAAA,QAErBC,cAFqB;;AAItC,QAAMC,2BAA2B,GAAG,CAAC;AAAEJ,IAAAA;AAAF,GAAD,KAAe;AAC1CH,IAAAA,MAAM,CAACG,KAAD,CAAN,CACAK,IADA,CACKC,IAAI,IAAI;AACV,UAAIA,IAAI,CAACC,KAAT,EAAgB;AACZJ,QAAAA,cAAc,CAAC;AACXD,UAAAA,WAAW,EAAE;AADF,SAAD,CAAd;AAGH,OAJD,MAIO;AACHC,QAAAA,cAAc,CAAC;AACXD,UAAAA,WAAW,EAAEI,IAAI,CAACR;AADP,SAAD,CAAd;AAGH;AACJ,KAXA;AAYVU,IAAAA,OAAO,CAACC,GAAR;AACE,GAdD;;AAgBH,QAAMC,2BAA2B,GAAG,MAAM;AACjCP,IAAAA,cAAc,CAAC;AACXD,MAAAA,WAAW,EAAE;AADF,KAAD,CAAd;AAGH,GAJN;;AAMG,QAAMS,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACC,KAApD;;AAEH,QAAMC,gBAAgB,GAAGF,UAAU,IAC5B;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,UAAU,CAACC,KADhB,CAFJ,CADP;;AASA,SACC;AAAS,IAAA,SAAS,EAAC,gBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQC,oBAAC,WAAD;AACa,IAAA,WAAW,EAAEX,WAD1B;AAEa,IAAA,2BAA2B,EAAEE,2BAF1C;AAGa,IAAA,2BAA2B,EAAEM,2BAH1C;AAIa,IAAA,kBAAkB,EAAEC,kBAJjC;AAKa,IAAA,gBAAgB,EAAEG,gBAL/B;AAMa,IAAA,UAAU,EAAEf,WANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARD,CADD;AAmBA;;AAED,eAAeD,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport Autosuggest from 'react-autosuggest';\nimport search from './MainComponent';\n\n\nfunction Search ({ handleInput, search }) {\n\tconst [value, setValue] = useState('')\n\tconst [suggestions, setSuggestions] = useState([])\n\n    const onSuggestionsFetchRequested = ({ value }) => {\n             search(value)\n            .then(data => {\n                if (data.Error) {\n                    setSuggestions({\n                        suggestions: []\n                    });\n                } else {\n                    setSuggestions({\n                        suggestions: data.Search\n                    });\n                }\n            })\n\t\t\tconsole.log()\n    };\n\n\tconst onSuggestionsClearRequested = () => {\n\t\t        setSuggestions({\n\t\t            suggestions: []\n\t\t        });\n\t\t    };\n\n    const getSuggestionValue = suggestion => suggestion.Title;\n\n\tconst renderSuggestion = suggestion => (\n        <span className=\"sugg-option\">\n            {/* <span className=\"icon-wrap\"><img src={suggestion.Poster} /></span> */}\n            <span className=\"name\">\n                {suggestion.Title}\n            </span>\n        </span>\n    );\n\n\treturn (\n\t\t<section className=\"searchbox-wrap\">\n\t\t\t{/* <input \n\t\t\t\ttype=\"text\" \n\t\t\t\tplaceholder=\"Search for a movie...\" \n\t\t\t\tclassName=\"searchbox\" \n\t\t\t\tonChange={handleInput}\n\t\t\t\tonKeyPress={search}\n\t\t\t/> */}\n\t\t\t<Autosuggest\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\n                getSuggestionValue={getSuggestionValue}\n                renderSuggestion={renderSuggestion}\n                inputProps={handleInput}\n            />\n\t\t</section>\n\t)\n}\n\nexport default Search\n\n\n"]},"metadata":{},"sourceType":"module"}